/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * API Turnos Online
 * Documentaci√≥in de la API para gesti√≥n de turnos y consultorios
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  PatchUsersMeBody,
  PostAuth200,
  PostAuthBody,
  Usuario
} from './schemas';

export const getAPITurnosOnline = () => {
/**
 * @summary Obtener todos los usuarios
 */
const getUsers = <TData = AxiosResponse<Usuario[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/users`,options
    );
  }

/**
 * @summary Iniciar sesi√≥n
 */
const postAuth = <TData = AxiosResponse<PostAuth200>>(
    postAuthBody: PostAuthBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/auth`,
      postAuthBody,options
    );
  }

/**
 * @summary Obtener mi perfil
 */
const getUsersMe = <TData = AxiosResponse<Usuario>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/users/me`,options
    );
  }

/**
 * @summary Actualizar mi perfil
 */
const patchUsersMe = <TData = AxiosResponse<Usuario>>(
    patchUsersMeBody: PatchUsersMeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:5000/api/v1/users/me`,
      patchUsersMeBody,options
    );
  }

/**
 * @summary Listar todos los consultorios
 */
const getConsultorios = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/consultorios`,options
    );
  }

/**
 * @summary Crear un nuevo consultorio
 */
const postConsultorios = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/consultorios`,undefined,options
    );
  }

/**
 * @summary Obtener consultorio por ID
 */
const getConsultoriosId = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/consultorios/${id}`,options
    );
  }

/**
 * @summary Invitar profesional al consultorio
 */
const postConsultoriosIdInvitar = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/consultorios/${id}/invitar`,undefined,options
    );
  }

/**
 * @summary Listar profesionales de un consultorio
 */
const getConsultoriosIdProfesionales = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/consultorios/${id}/profesionales`,options
    );
  }

/**
 * @summary Obtener todos los profesionales
 */
const getProfesionales = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/profesionales`,options
    );
  }

/**
 * @summary Crear perfil profesional para el usuario actual
 */
const postProfesionales = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/profesionales`,undefined,options
    );
  }

/**
 * @summary Obtener un profesional por ID
 */
const getProfesionalesId = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/profesionales/${id}`,options
    );
  }

/**
 * @summary Registrar un nuevo usuario
 */
const postRegister = <TData = AxiosResponse<void>>(
    usuario: Usuario, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/register`,
      usuario,options
    );
  }

/**
 * @summary Obtener d√≠as operativos del profesional
 */
const getDisponibilidadDias = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/disponibilidad/dias`,options
    );
  }

/**
 * @summary Registrar un d√≠a operativo
 */
const postDisponibilidadDias = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/disponibilidad/dias`,undefined,options
    );
  }

/**
 * @summary Registrar horario operativo
 */
const postDisponibilidadHorarios = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/disponibilidad/horarios`,undefined,options
    );
  }

/**
 * @summary Obtener horarios por d√≠a operativo
 */
const getDisponibilidadHorariosDiaId = <TData = AxiosResponse<void>>(
    diaId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/disponibilidad/horarios/${diaId}`,options
    );
  }

/**
 * @summary Listar turnos disponibles
 */
const getTurnosDisponibles = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/turnos/disponibles`,options
    );
  }

/**
 * @summary Obtener reservas del usuario actual
 */
const getReservas = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/reservas`,options
    );
  }

/**
 * @summary Crear una nueva reserva
 */
const postReservas = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:5000/api/v1/reservas`,undefined,options
    );
  }

/**
 * @summary Obtener reservas como profesional
 */
const getReservasProfesional = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:5000/api/v1/reservas/profesional`,options
    );
  }

/**
 * @summary Cancelar una reserva
 */
const patchReservasIdCancelar = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:5000/api/v1/reservas/${id}/cancelar`,undefined,options
    );
  }

return {getUsers,postAuth,getUsersMe,patchUsersMe,getConsultorios,postConsultorios,getConsultoriosId,postConsultoriosIdInvitar,getConsultoriosIdProfesionales,getProfesionales,postProfesionales,getProfesionalesId,postRegister,getDisponibilidadDias,postDisponibilidadDias,postDisponibilidadHorarios,getDisponibilidadHorariosDiaId,getTurnosDisponibles,getReservas,postReservas,getReservasProfesional,patchReservasIdCancelar}};
export type GetUsersResult = AxiosResponse<Usuario[]>
export type PostAuthResult = AxiosResponse<PostAuth200>
export type GetUsersMeResult = AxiosResponse<Usuario>
export type PatchUsersMeResult = AxiosResponse<Usuario>
export type GetConsultoriosResult = AxiosResponse<void>
export type PostConsultoriosResult = AxiosResponse<void>
export type GetConsultoriosIdResult = AxiosResponse<void>
export type PostConsultoriosIdInvitarResult = AxiosResponse<void>
export type GetConsultoriosIdProfesionalesResult = AxiosResponse<void>
export type GetProfesionalesResult = AxiosResponse<void>
export type PostProfesionalesResult = AxiosResponse<void>
export type GetProfesionalesIdResult = AxiosResponse<void>
export type PostRegisterResult = AxiosResponse<void>
export type GetDisponibilidadDiasResult = AxiosResponse<void>
export type PostDisponibilidadDiasResult = AxiosResponse<void>
export type PostDisponibilidadHorariosResult = AxiosResponse<void>
export type GetDisponibilidadHorariosDiaIdResult = AxiosResponse<void>
export type GetTurnosDisponiblesResult = AxiosResponse<void>
export type GetReservasResult = AxiosResponse<void>
export type PostReservasResult = AxiosResponse<void>
export type GetReservasProfesionalResult = AxiosResponse<void>
export type PatchReservasIdCancelarResult = AxiosResponse<void>
